rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidInteractionUpdate() {
      let allowedFields = ['reputation', 'reputationHistory', 'achievements', 'likesReceived', 'commentsReceived', 'followersCount', 'followingCount', 'projectCount', 'isTopRanked'];
      let updateFields = request.resource.data.diff(resource.data).affectedKeys();
      return updateFields.hasOnly(allowedFields);
    }

    function isValidLikeOrFavoriteUpdate() {
      let allowedFields = ['likedBy', 'likes', 'favoritedBy'];
      let updateFields = request.resource.data.diff(resource.data).affectedKeys();
      return updateFields.hasOnly(allowedFields);
    }

    // Reglas para los perfiles de usuario
    match /userProfiles/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
        (isAuthenticated() && isValidInteractionUpdate());
      allow delete: if isOwner(userId);

      // Reglas para la subcolección de favoritos
      match /favorites/{projectId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }

      // Reglas para la subcolección de seguidores
      match /followers/{followerId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.auth.uid == followerId;
        allow delete: if isAuthenticated() && request.auth.uid == followerId;
      }

      // Reglas para la subcolección de seguidos
      match /following/{followedId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }

      // Reglas para likes en el perfil
      match /likes/{likeId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }

    // Reglas para los proyectos
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isValidLikeOrFavoriteUpdate()
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Reglas para comentarios
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid
        );
      }

      // Reglas para likes
      match /likes/{likeId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }

    // Colección principal de likes
    match /likes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Reglas para las comunidades
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid ||
        resource.data.moderatorIds.hasAny([request.auth.uid])
      );
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;

      // Reglas para miembros de la comunidad
      match /members/{memberId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/communities/$(communityId)).data.moderatorIds.hasAny([request.auth.uid])
        );
      }
    }

    // Reglas por defecto - denegar todo lo demás
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 
.gitignore